{
	"info": {
		"_postman_id": "d4843abb-ee04-4b52-8540-f02b0d06ef3c",
		"name": "Random User Generator Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33349068"
	},
	"item": [
		{
			"name": "Random User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Number of results is 1\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.results).to.have.lengthOf(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Random five Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Number of results is 5\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.results).to.have.lengthOf(5);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}api?results=5",
					"host": [
						"{{url}}api"
					],
					"query": [
						{
							"key": "results",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User By Gender",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"pm.test(\"Response structure is valid\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"results\");\r",
							"    pm.expect(jsonData).to.have.property(\"info\");\r",
							"});\r",
							"pm.test(\"Gender is male\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.results[0]).to.have.property(\"gender\", \"male\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api?gender=male",
					"host": [
						"{{url}}"
					],
					"path": [
						"api"
					],
					"query": [
						{
							"key": "gender",
							"value": "male"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "New User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Response structure is valid\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"username\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"    pm.expect(jsonData).to.have.property(\"address\");\r",
							"    pm.expect(jsonData).to.have.property(\"phone\");\r",
							"    pm.expect(jsonData).to.have.property(\"website\");\r",
							"    pm.expect(jsonData).to.have.property(\"company\");\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"pm.test(\"User information is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"name\", \"Jane Smith\");\r",
							"    pm.expect(jsonData).to.have.property(\"username\", \"janesmith\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\", \"jane.smith@example.com\");\r",
							"    pm.expect(jsonData).to.have.property(\"phone\", \"987-654-3210\");\r",
							"    pm.expect(jsonData).to.have.property(\"website\", \"http://janesmith.com\");\r",
							"    pm.expect(jsonData).to.have.property(\"id\", 11);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Jane Smith\",\r\n  \"username\": \"janesmith\",\r\n  \"email\": \"jane.smith@example.com\",\r\n  \"address\": {\r\n    \"street\": \"456 Elm St\",\r\n    \"city\": \"Los Angeles\",\r\n    \"zipcode\": \"90001\"\r\n  },\r\n  \"phone\": \"987-654-3210\",\r\n  \"website\": \"http://janesmith.com\",\r\n  \"company\": {\r\n    \"name\": \"Smith Solutions\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response has no keys\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(Object.keys(jsonData).length).to.equal(0);\r",
							"});\r",
							"pm.test(\"Response structure is valid\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\").that.is.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Alice Johnson Updated\",\r\n  \"username\": \"alice.johnson.updated\",\r\n  \"email\": \"alice.johnson.updated@example.com\",\r\n  \"address\": {\r\n    \"street\": \"789 Oak St Updated\",\r\n    \"city\": \"Chicago Updated\",\r\n    \"zipcode\": \"60601\"\r\n  },\r\n  \"phone\": \"555-123-4567 Updated\",\r\n  \"website\": \"http://alicejohnsonupdated.com\",\r\n  \"company\": {\r\n    \"name\": \"Johnson Innovations Updated\"\r\n  }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users/8",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users",
						"8"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update some of user data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response structure is valid\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"    pm.expect(jsonData).to.have.property(\"phone\");\r",
							"});\r",
							"pm.test(\"Email is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.equal(\"nada@gmail.com\");\r",
							"});\r",
							"pm.test(\"Phone number is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.phone).to.equal(\"111-222-9999\");\r",
							"});\r",
							"pm.test(\"Response contains no extra properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(Object.keys(jsonData)).to.have.members([\"name\", \"username\" , \"email\", \"phone\"]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Nada Ahmed\",\r\n  \"username\": \"nada\",\r\n  \"email\": \"nada@gmail.com\",\r\n  \"phone\": \"111-222-9999\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users/11",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users",
						"11"
					]
				}
			},
			"response": []
		}
	]
}